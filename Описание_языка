Описание возможностей языка, для которого разработан интерпретатор:

1)	По синтаксису он похож на Oracle PL/SQL.

2)	Поддерживает следующие типы данных: varchar2, integer, number, date, json, record, Boolean.

3)	Поддерживает работу с курсорами, в нем реализованы операторы: for, while, open, if.

4)	Имеются следующие встроенные пакеты:
  a)	TEXT_IO – для работы с локальными файлами.
  b)	HTTP_IO – для работы с http/https- запросами из БД.
  c)	JSON_IO – для работы с JSON.
  d)	RECORD_IO – для работы с переменными типа record.

5)	Реализован оператор execute для выполнения произвольного текста.

6)	Также реализована поддержка различных встроенных функций – 
      <li><b>dbms_output.put_line(text)</b> - вывод текстового сообщения.</li>
			<li><b>upper(text)</b> - перевод текста в верхний регистр.</li>
			<li><b>lower(text)</b> - перевод текста в нижний регистр.</li>
			<li><b>rtrim(text)</b> - отрезать пробелы справа.</li>			
			<li><b>ltrim(text)</b> - отрезать пробелы слева.</li>			
			<li><b>trim(text) </b> - отрезать пробелы со всех сторон.</li>			
			<li><b>replace(text, text_to_replace, replacement_text) </b> - замена текста по образцу.</li>			
			<li><b>substr(text, start_position, length) </b> - извлечь подстроку из строки.</li>						
			<li><b>instr(text, substring) </b> - возвращает n-е вхождение подстроки в строке.</li>									
			<li><b>length(text) </b> - возвращает длину строки.</li>												
			<li><b>chr(number_code) </b> - возвращает символ, который основан на числовом коде.</li>															
			<li><b>host(command, work_dir) </b> - выполним cmd-команду и вернем результат (work_dir - рабочий каталог (например: c:\)).</li>	instr, substr, trim, sysdate и т. д. 

